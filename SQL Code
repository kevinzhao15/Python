SELECT
statements used to fetch data from database. Every query begins with SELECT

FROM
used to specify which database is selected. 

(SELECT * FROM celebs;)
this code returns information from the database to provide the table on celebs
* is a wildcard character that allows you to select every column without having to name each one. SELECT name FROM celebs; vs SELECT * FROM celebs;

CREATE TABLE
a clause that creates a table. Clauses perform specific tasks in SQL - typically written in capital letters. 
CREATE TABLE table_name (
  column_1 data_type,                             |
  column_2 data_type,                             |    These are parameters. A parameter is a list of columns, data types or values that are passed to a clause as an argument
  column_3 data_type                              |    
);

CREATE TABLE celebs (
  id INTEGER,
  name TEXT
  age INTEGER
);

INSERT
inserts a new row into the table.
INSERT INTO celebs  (id, name, age)
VALUES (1, 'Justin Bieber', 22);

ALTER TABLE
a clause that allows you to make specified changes
ALTER TABLE celebs
ADD COLUMN twitter_handle TEXT;

UPDATE 
allows us to edit a row in the table
UPDATE celebs
SET twitter_handle = '@taylorswift'
WHERE id = 4;                             | where ID is 4, the twitter handle will be set to @taylorswift

DELETE 
deletes one or more rows from the table
DELETE FROM celebs
WHERE twitter_handle IS NULL              | deletes all rows where twitter_handle = âˆ…


CONSTRAINTS
  PRIMARY KEY
    columns can be used to uniquely identify the row. Attempts to insert a row with an identical value to a row already in the table will result in a constraint violation
  UNIQUE
    columns have a different value for every row
  NOT NULL
    columns must have a value
  DEFAULT   
    columns take an additional argument that will be the assumed value for an inserted row if the new row does not specify a value for that column

AS
keyword in SQL that allows you to rename a column or table using an alias. Can be anything as long as its in quotes
SELECT column name AS '_____';

DISTINCT
used to return unique values in the output. Filters out all duplicate values in the specified column(s)
SELECT DISTINCT column name FROM table;

WHERE
used to restrict query results to obtain only the information we want
SELECT * FROM movies WHERE imdb_rating > 8;

LIKE
used with the WHERE clause to search for a specific pattern in a column. A% matches all movies with names that begin with letter 'A' %a matches all movies that end with 'a' %a% matches all movies that start or end with 'a'
SELECT * FROM movies WHERE name LIKE 'Se_en';         | selects all movies that start with "se" and end with "en" and having exactly one character in the middle

BETWEEN
Used in a WHERE clause to filter the result set within a certain range
SELECT * FROM movies WHERE year BETWEEN 1990 and 1999;
SELECT * FROM movies WHERE name BETWEEN 'A' and 'J';      | If the movie has the name of simply 'J' it would be included by not 'Jaws' because it only goes up to J

OR
can also be used to combine multiple conditions in WHERE. Displays a row if any condition is true. AND only displays a row if all the conditions are true
SELECT * FROM movies WHERE year > 2014 OR genre = 'action';

ORDER BY
sorts the result either alphabetically or numerically
SELECT * FROM movies ORDER BY name;     SELECT * FROM movies ORDER BY year DESC(ASC);

LIMIT
a clause that lets you specify the maximum number of rows the result set will have
SELECT * FROM movies LIMIT 10;

CASE
allows us to create different outputs
SELECT name,
CASE 
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END AS 'Review'        | Creates a new column called Review
FROM movies;


Aggregates are calculations performed on multiple rows of a table.

COUNT(): count the number of rows
  SELECT COUNT(*) FROM table_name;          | this will count the number of rows in a table
  
SUM(): the sum of the values in a column
  SELECT SUM(column_name) FROM table_name;  | this will add all the values in a particular column

MAX()/MIN(): the largest/smallest value
  SELECT MAX(column_name) FROM table_name;  | selects the largest (smallest if using MIN) value in the column

AVG(): the average of the values in a column
  SELECT AVG(column_name) FROM table_name;  | calculates the average value of a particular column

ROUND(): round the values in the column
  SELECT ROUND(column_name, integer) FROM table_name; | rounds the value in the column to the number of decimal places specified by the integer
  SELECT ROUND(AVG(price),2) FROM fake_apps;          | averages and rounds the value
  
GROUP BY
a clause used to arrange identical data into groups. Comes after any WHERE statements but before ORDER BY or LIMIT
SELECT year, AVG(imdb_rating) FROM movies GROUP BY year ORDER BY year

HAVING
Filters which groups to include and which to exclude. Comes after GROUP BY but before ORDER BY and LIMIT. Use HAVING when there is an aggregate function in it
  SELECT year, genre, COUNT(name) FROM movies GROUP BY 1, 2 HAVING COUNT(name) > 10;
